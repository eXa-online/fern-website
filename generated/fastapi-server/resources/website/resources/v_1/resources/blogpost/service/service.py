# This file was auto-generated by Fern from our API Definition.

import abc
import functools
import inspect
import logging
import typing

import fastapi

from ........core.abstract_fern_service import AbstractFernService
from ........core.exceptions.fern_http_exception import FernHTTPException
from ........core.route_args import get_route_args
from ........security import ApiAuth, FernAuth
from .......commons.errors.bad_request_error import BadRequestError
from .......commons.errors.not_found_error import NotFoundError
from .......fixtures.resources.blogpost.types.blog_post import BlogPost
from .......fixtures.resources.blogpost.types.blog_post_collection import BlogPostCollection
from .......fixtures.resources.blogpost.types.blog_post_slug import BlogPostSlug
from .......fixtures.resources.blogpost.types.create_blog_post_request import CreateBlogPostRequest
from ..errors.blog_post_does_not_exist_error import BlogPostDoesNotExistError


class AbstractWebsiteV1BlogpostService(AbstractFernService):
    """
    AbstractWebsiteV1BlogpostService is an abstract class containing the methods that you should implement.

    Each method is associated with an API route, which will be registered
    with FastAPI when you register your implementation using Fern's register()
    function.
    """

    @abc.abstractmethod
    def get_blogposts(self) -> BlogPostCollection:
        """
        Retrieve all blogposts from the content store
        """
        ...

    @abc.abstractmethod
    def get_blog_post(self, *, slug: str) -> BlogPost:
        """
        Retrieve a blog post from the content store based on its slug
        """
        ...

    @abc.abstractmethod
    def create_blog_post(self, *, body: CreateBlogPostRequest, auth: ApiAuth) -> BlogPostSlug:
        """
        Add a new blogpost to the content store
        """
        ...

    """
    Below are internal methods used by Fern to register your implementation.
    You can ignore them.
    """

    @classmethod
    def _init_fern(cls, router: fastapi.APIRouter) -> None:
        cls.__init_get_blogposts(router=router)
        cls.__init_get_blog_post(router=router)
        cls.__init_create_blog_post(router=router)

    @classmethod
    def __init_get_blogposts(cls, router: fastapi.APIRouter) -> None:
        endpoint_function = inspect.signature(cls.get_blogposts)
        new_parameters: typing.List[inspect.Parameter] = []
        for index, (parameter_name, parameter) in enumerate(endpoint_function.parameters.items()):
            if index == 0:
                new_parameters.append(parameter.replace(default=fastapi.Depends(cls)))
            else:
                new_parameters.append(parameter)
        setattr(cls.get_blogposts, "__signature__", endpoint_function.replace(parameters=new_parameters))

        @functools.wraps(cls.get_blogposts)
        def wrapper(*args: typing.Any, **kwargs: typing.Any) -> BlogPostCollection:
            try:
                return cls.get_blogposts(*args, **kwargs)
            except (NotFoundError, BadRequestError) as e:
                raise e
            except FernHTTPException as e:
                logging.getLogger(f"{cls.__module__}.{cls.__name__}").warn(
                    f"Endpoint 'get_blogposts' unexpectedly threw {e.__class__.__name__}. "
                    + f"If this was intentional, please add {e.__class__.__name__} to "
                    + "the endpoint's errors list in your Fern Definition."
                )
                raise e

        # this is necessary for FastAPI to find forward-ref'ed type hints.
        # https://github.com/tiangolo/fastapi/pull/5077
        wrapper.__globals__.update(cls.get_blogposts.__globals__)

        router.get(
            path="/blog",
            response_model=BlogPostCollection,
            description=AbstractWebsiteV1BlogpostService.get_blogposts.__doc__,
            **get_route_args(cls.get_blogposts, default_tag="website.v_1.blogpost"),
        )(wrapper)

    @classmethod
    def __init_get_blog_post(cls, router: fastapi.APIRouter) -> None:
        endpoint_function = inspect.signature(cls.get_blog_post)
        new_parameters: typing.List[inspect.Parameter] = []
        for index, (parameter_name, parameter) in enumerate(endpoint_function.parameters.items()):
            if index == 0:
                new_parameters.append(parameter.replace(default=fastapi.Depends(cls)))
            elif parameter_name == "slug":
                new_parameters.append(parameter.replace(default=fastapi.Path(...)))
            else:
                new_parameters.append(parameter)
        setattr(cls.get_blog_post, "__signature__", endpoint_function.replace(parameters=new_parameters))

        @functools.wraps(cls.get_blog_post)
        def wrapper(*args: typing.Any, **kwargs: typing.Any) -> BlogPost:
            try:
                return cls.get_blog_post(*args, **kwargs)
            except (BlogPostDoesNotExistError, NotFoundError, BadRequestError) as e:
                raise e
            except FernHTTPException as e:
                logging.getLogger(f"{cls.__module__}.{cls.__name__}").warn(
                    f"Endpoint 'get_blog_post' unexpectedly threw {e.__class__.__name__}. "
                    + f"If this was intentional, please add {e.__class__.__name__} to "
                    + "the endpoint's errors list in your Fern Definition."
                )
                raise e

        # this is necessary for FastAPI to find forward-ref'ed type hints.
        # https://github.com/tiangolo/fastapi/pull/5077
        wrapper.__globals__.update(cls.get_blog_post.__globals__)

        router.get(
            path="/blog/{slug}",
            response_model=BlogPost,
            description=AbstractWebsiteV1BlogpostService.get_blog_post.__doc__,
            **get_route_args(cls.get_blog_post, default_tag="website.v_1.blogpost"),
        )(wrapper)

    @classmethod
    def __init_create_blog_post(cls, router: fastapi.APIRouter) -> None:
        endpoint_function = inspect.signature(cls.create_blog_post)
        new_parameters: typing.List[inspect.Parameter] = []
        for index, (parameter_name, parameter) in enumerate(endpoint_function.parameters.items()):
            if index == 0:
                new_parameters.append(parameter.replace(default=fastapi.Depends(cls)))
            elif parameter_name == "body":
                new_parameters.append(parameter.replace(default=fastapi.Body(...)))
            elif parameter_name == "auth":
                new_parameters.append(parameter.replace(default=fastapi.Depends(FernAuth)))
            else:
                new_parameters.append(parameter)
        setattr(cls.create_blog_post, "__signature__", endpoint_function.replace(parameters=new_parameters))

        @functools.wraps(cls.create_blog_post)
        def wrapper(*args: typing.Any, **kwargs: typing.Any) -> BlogPostSlug:
            try:
                return cls.create_blog_post(*args, **kwargs)
            except (NotFoundError, BadRequestError) as e:
                raise e
            except FernHTTPException as e:
                logging.getLogger(f"{cls.__module__}.{cls.__name__}").warn(
                    f"Endpoint 'create_blog_post' unexpectedly threw {e.__class__.__name__}. "
                    + f"If this was intentional, please add {e.__class__.__name__} to "
                    + "the endpoint's errors list in your Fern Definition."
                )
                raise e

        # this is necessary for FastAPI to find forward-ref'ed type hints.
        # https://github.com/tiangolo/fastapi/pull/5077
        wrapper.__globals__.update(cls.create_blog_post.__globals__)

        router.post(
            path="/blog",
            response_model=BlogPostSlug,
            description=AbstractWebsiteV1BlogpostService.create_blog_post.__doc__,
            **get_route_args(cls.create_blog_post, default_tag="website.v_1.blogpost"),
        )(wrapper)
