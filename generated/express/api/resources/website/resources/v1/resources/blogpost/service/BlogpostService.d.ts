/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { ExaOnlineDeFernWebsite } from "../../../../../../../..";
import express from "express";
import * as serializers from "../../../../../../../../serialization";
export interface BlogpostServiceMethods {
    getBlogposts(req: express.Request<never, ExaOnlineDeFernWebsite.fixtures.BlogPostCollection, never, never>, res: {
        send: (responseBody: ExaOnlineDeFernWebsite.fixtures.BlogPostCollection) => Promise<void>;
        cookie: (cookie: string, value: string, options?: express.CookieOptions) => void;
        locals: any;
    }): void | Promise<void>;
    getBlogPost(req: express.Request<{
        slug: serializers.fixtures.BlogPostSlug.Raw;
    }, ExaOnlineDeFernWebsite.fixtures.BlogPost, never, never>, res: {
        send: (responseBody: ExaOnlineDeFernWebsite.fixtures.BlogPost) => Promise<void>;
        cookie: (cookie: string, value: string, options?: express.CookieOptions) => void;
        locals: any;
    }): void | Promise<void>;
    createBlogPost(req: express.Request<never, ExaOnlineDeFernWebsite.fixtures.BlogPostSlug, ExaOnlineDeFernWebsite.fixtures.CreateBlogPostRequest, never>, res: {
        send: (responseBody: ExaOnlineDeFernWebsite.fixtures.BlogPostSlug) => Promise<void>;
        cookie: (cookie: string, value: string, options?: express.CookieOptions) => void;
        locals: any;
    }): void | Promise<void>;
}
export declare class BlogpostService {
    private readonly methods;
    private router;
    constructor(methods: BlogpostServiceMethods, middleware?: express.RequestHandler[]);
    addMiddleware(handler: express.RequestHandler): this;
    toRouter(): express.Router;
}
