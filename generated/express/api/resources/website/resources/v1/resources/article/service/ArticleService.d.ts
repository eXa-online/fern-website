/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { EXaOnlineGmbHFernWebsite } from "../../../../../../../..";
import express from "express";
import * as serializers from "../../../../../../../../serialization";
export interface ArticleServiceMethods {
    getArticles(req: express.Request<never, EXaOnlineGmbHFernWebsite.fixtures.ArticleCollection, never, never>, res: {
        send: (responseBody: EXaOnlineGmbHFernWebsite.fixtures.ArticleCollection) => Promise<void>;
        cookie: (cookie: string, value: string, options?: express.CookieOptions) => void;
        locals: any;
    }): void | Promise<void>;
    getArticle(req: express.Request<{
        slug: serializers.fixtures.ArticleSlug.Raw;
    }, EXaOnlineGmbHFernWebsite.fixtures.Article, never, never>, res: {
        send: (responseBody: EXaOnlineGmbHFernWebsite.fixtures.Article) => Promise<void>;
        cookie: (cookie: string, value: string, options?: express.CookieOptions) => void;
        locals: any;
    }): void | Promise<void>;
    createArticle(req: express.Request<never, EXaOnlineGmbHFernWebsite.fixtures.ArticleSlug, EXaOnlineGmbHFernWebsite.fixtures.CreatArticleRequest, never>, res: {
        send: (responseBody: EXaOnlineGmbHFernWebsite.fixtures.ArticleSlug) => Promise<void>;
        cookie: (cookie: string, value: string, options?: express.CookieOptions) => void;
        locals: any;
    }): void | Promise<void>;
}
export declare class ArticleService {
    private readonly methods;
    private router;
    constructor(methods: ArticleServiceMethods, middleware?: express.RequestHandler[]);
    addMiddleware(handler: express.RequestHandler): this;
    toRouter(): express.Router;
}
